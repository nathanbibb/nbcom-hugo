[
    {
        "ref": "http://www.nathanbibb.com/journal/a-note-on-my-new-computer-setup/",
        "title": "A Note on My New Computer Setup",
        "section": "journal",
        "tags": ["Technology"],
        "date" : "2020.06.28",
        "body": "During this whole COVID crisis, I\u0026rsquo;ve been attending a lot more virtual meetings for personal reasons that I ever have in my life. While I was able to attend these meetings with my trust NUC desktop computer, I felt the need once again to have a decent laptop for this and other reasons.\nI purchased my last laptop in 2013, and I honestly didn\u0026rsquo;t think I would ever get a new laptop. But a company called System76 recently came out with a new computer that seemed to be exactly what I wanted, so I blew my stimulus money on a new machine. I do not regret it at all.\nThere are a ton of reviews of the System76 Lemur Pro, so I\u0026rsquo;m not going to review it here or anything. However, I will provide some links to accessories that work well with it. One of the things I didn\u0026rsquo;t want to give up is my multiple monitor setup. Since the Lemur Pro has a USB-C port that supports Display Port, so it should be supported by a USB-C hub, but the whole world of USB-C is a confusing mess right now.\nSo here\u0026rsquo;s what I used that worked:\n Lemur Pro: I ordered mine with minimum RAM and a 250GB NVMe drive for the OS, no second drive. Hiearcool USB-C Hub: I was prepared to return it if it didn\u0026rsquo;t work, but it doesn the job, hooking up 2 monitors (HDMI and/or VGA), USB-3 external drives, Ethernet, and power. USB-C Power Supply: Works fine hooked up to the Hiearcool hub. USB-C Extender: The one complaint I have about the Hiearcool Hub is it has a short cord to the laptop that is attached to the hub. This extender allows me to attach the hub to the underside of my desk and hide away the mess.  So that\u0026rsquo;s what works for me. I should probably post this on reddit so someone actually sees it.\n"
    }
,
    {
        "ref": "http://www.nathanbibb.com/journal/setting-up-this-hugo-site/",
        "title": "Setting Up This Hugo Site",
        "section": "journal",
        "tags": ["Technology"],
        "date" : "2020.04.04",
        "body": "When setting up this Hugo site, I found that most of the documentation was either very high-level (\u0026ldquo;Quick Start\u0026rdquo;) or very in-depth (Full Specs). There wasn\u0026rsquo;t much of a middle ground, giving a step-by-step process of both setting up a minimal site, and doing some basic configuration,\nWhile it was easy enough to figure out, I thought it might be helpful to someone if I detailed the steps I took to do the following:\n Setting up the Initial Site Tweak the Theme (things like colors) Adjust the Theme Layout (things like the footer and lists)  Below, I\u0026rsquo;m providing links to the Hugo Quick Start that I used as I set up, and noting where I made changes to the steps in that guide. Also, I am using the Pulp theme rather than the theme suggested in the Quick Start.\nSetting up the Initial Site Install and Creating a New Site  Step 1: Install Hugo  I use Fedora as my Desktop OS, and I do not use Homebrew, so I followed the instructions to Install Hugo from Tarball. Worked well for me. That guide suggested installing at ~/bin, but I prefer to keep my local executables at ~/.local/bin to avoid home directory clutter.\nStep 2: Create a New Site  Use as directed - hugo new site quickstart.\nAdding a Theme Step 3: Add a Theme  I followed each part of this step except for the last piece. I used the Pulp theme, and as directed by the guide, I downloaded the theme from Github and added it to my site\u0026rsquo;s theme directory:\ncd quickstart git init git submodule add https://github.com/koirand/pulp.git themes/pulp See the note on the Quick Start for non-git users. I recently moved from Subversion to Git, so I was good to go here.\nAfter this, I diverged a bit from the Quick Start Guide. Instead of adding the theme to the site configuration as suggested in the Quick Start:\necho 'theme = \u0026quot;pulp\u0026quot;' \u0026gt;\u0026gt; config.toml \u0026hellip;I copied the config file from the theme\u0026rsquo;s exampleSite directory:\ncp themes/pulp/exampleSite/config.toml . I found there were settings in the Theme\u0026rsquo;s config file that I needed, and there was no need to copy them to Hugo\u0026rsquo;s default config file. The default theme for the Quick Start, Ananke, is structured the same way, so you should probably do this regardless of the theme you use.\nAdding Content and Starting the Server Step 4: Add Some Content  When adding content, you preface the content file with a category. This is really just the directory the content will be in. The category expected by the default theme was posts, but Pulp expects a category of blog, so my first new content command looked like this:\nhugo new blog/my-first-post.md Now, in a text editor, put something in the new file created at quickstart/content/blog/my-first-post.md. Put your content at the bottom of the file, so it looks something like this:\n--- title: \u0026quot;My First Post\u0026quot; date: 2020-04-04T18:32:47-04:00 draft: true --- This is my own freshly created content! Step 5: Start the Hugo server  Now, you can start your Hugo server and see your cool new site:\nhugo server -D The -D is for \u0026ldquo;Drafts\u0026rdquo;.\nIf you point your browser to http://localhost:1313/, you should see something similar to this: Click on the icon to the left that looks like a book, and you should see: Then click on your new post link, and you should see it: Tweak the Theme Step 6: Customize the Theme  With Step 6, I made major deviations from the Quick Start. The Quick Start really is just enough to barely get you going here. There is a lot more to do to get to having your own site configured.\nBasic Customization You will first need to change the following lines in your config.toml file to reflect your specific site:\nbaseurl = \u0026quot;https://example.com/\u0026quot; title = \u0026quot;Site Title\u0026quot; Also, in the params section, you should change these values:\n[params] author = \u0026#34;Your Name\u0026#34;  avatar = \u0026#34;avatar.jpg\u0026#34; favicon = \u0026#34;favicon.ico\u0026#34; description = \u0026#34;\u0026#34;\u0026#34; Please write anything here. Profiles, backgrounds, favorite things etc. \u0026#34;\u0026#34;\u0026#34; publicationYear = \u0026#34;2019\u0026#34; Custom Images Don\u0026rsquo;t change avatar or favicon - the Pulp theme page has instructions for where to put your images for both of these, namely:\n Put a 200x200 pixel image (size is important here) named avatar.jpg in the directory static\\img. In the same directory, put your favicon.ico file  Your site should now look something like this (with your custom test): Create the Menu The Pulp theme provides icons from Font Awesome, so you can change each of these menu items to point to the URL to your Twitter, Github, and/or Email links, and add others as well. Just update or copy/paste this block in config.toml:\n[[menu.main]] identifier = \u0026#34;github\u0026#34; # name = \u0026#34;GitHub\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;fab fa-github fa-lg\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; url = \u0026#34;https://github.com/username\u0026#34; weight = 30 If you uncomment the name attribute, it will display a written name in addition to the icon.\nCustom Site Colors Basically, anything in your theme directory can be put in your main site directory structure, and it will override your theme. The theme styles are located in themes/pulp/assets/css. So you COULD copy all the stylesheets from this directory to assets/css (creating directories as needed), and your site will use those files.\nHowever, a better way to do this will be to override JUST the parts you want. That way, if the style is updated later, you\u0026rsquo;ll get the benefit of those updates while keeping the changes you made. To do this, you will need to do the following:\n Create a file called static\\css\\custom.css. Put your custom styles here Uncomment the line # custom_css = [\u0026quot;/css/custom.css\u0026quot;] in your config.toml  If you know how to adjust colors in CSS, you can set up your custom.css to provide the colors you want. I don\u0026rsquo;t think there is an easier way to do this.\nFor instance, the custom.css I used for this site (based on the Solarized color palette) looks like this:\n/* style.css overrides */ body { background-color: #073642; color: #93a1a1; } a:link { color: #93a1a1; } a:visited { color: #93a1a1; } a:hover { color: #eee8d5; } a:active { color: #eee8d5; } #searchBox #searchBoxInput { color: #93a1a1; background-color:#002b36; border: solid 1px #93a1a1; } #searchBox #searchBoxInput::placeholder { color: #eee8d5; } #searchResults { background-color:#002b36; border: solid 1px #eee8d5; } #searchResults mark { background-color: #268bd2; } #tags li a { background-color: #073642; } #contentsList hr.separator { border: solid 1px #fdf6e3; } /* markdown.css overrides */ #contentBody hr { border-bottom: 1px solid #fdf6e3; } #contentBody blockquote { color: #586e75; border-left: 0.25em solid #fdf6e3; } #contentBody table th, #contentBody table td { border: 1px solid #fdf6e3; background-color: #586e75; } #contentBody img { background-color: #586e75; } #contentBody code { background-color: #002b36; } #contentBody .highlight pre, #contentBody pre { background-color: #002b36; } Adjust the Theme Layout There were a couple of other things I wanted to change on my site that were more than just colors:\n I wanted to change how the Footer was displayed. I wanted to change the \u0026ldquo;blogs\u0026rdquo; screen to have some text.  Change to Footer - Hugo Partials I discovered that the footer of the Pulp theme was defined using what are called Partials. These are defined for this theme in themes/pulp/layouts/partials.\nTo change this, I copied the file I wanted to change, footer.html, to the same directory outside the theme directory - layouts/partials/footer.html. Then I added this line to the file:\n\u0026lt;footer\u0026gt; \u0026lt;p\u0026gt; \u0026amp;copy; {{ .Site.Params.publicationYear }} {{ .Site.Params.Author }}. Powered by \u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt; using the \u0026lt;a href=\u0026#34;https://github.com/koirand/pulp/\u0026#34;\u0026gt;pulp\u0026lt;/a\u0026gt; theme. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Another line that I added...\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; {{- range .Site.Params.custom_js -}} \u0026lt;script src=\u0026#34;{{ . }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} Change the \u0026ldquo;List\u0026rdquo; Default This one took me a while to figure out. I finally found what I needed buried in the List Template page in the Hugo Documentation. Here\u0026rsquo;s what I did - you can read up in the docs to get the details on why this worked:\n I created a new content/blog/_index.md file.  hugo new blog/_index.md In this file, I added the text I wanted to display on the main page of the blog.  --- title: \u0026quot;Blog\u0026quot; date: 2020-04-04T23:29:35-04:00 draft: true --- Here is the content I want on my blog main page... To get this to display, I had to change the list.html default layout. I copied themes/pulp/layouts/_default/list.html to layouts/_default/list.html, and updated the copied file to add the {{.Content}} Shortcode  {{ define \u0026#34;main\u0026#34;}} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;!-- search box --\u0026gt; {{.Content}}  \u0026lt;div id=\u0026#34;searchBox\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;searchBoxInput\u0026#34; placeholder=\u0026#34;Search...\u0026#34; /\u0026gt; \u0026lt;img id=\u0026#34;searchBoxIcon\u0026#34; src=\u0026#34;{{ .Site.BaseURL }}/img/search.png\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; Now with all these changes, your blog page should look something like this: Addendum: Building the Static Pages and Deploy Step 7: Build static pages  Once all of this is done, you are ready to build your static page.\nThe last piece I did here was to configure hugo deploy to deploy directly to my Google Cloud Storage bucket. I\u0026rsquo;m pretty sure I just followed the Hugo Deploy Documentation for that piece.\n"
    }
,
    {
        "ref": "http://www.nathanbibb.com/journal/a-new-site-design/",
        "title": "A New Site Design",
        "section": "journal",
        "tags": ["Technology"],
        "date" : "2020.03.18",
        "body": "While the rest of the world is worrying about the COVID-19 global pandemic, I decided to do a third redesign of my personal website.\nMigration to Google Cloud Storage I decided a few years ago I wanted to stop paying hosting fees. Several places had emerged where I could host for free or almost free. I played around with AWS and GCP. Each had free tiers where I could learn. I ended up moving my hosting to Google Cloud Storage since there is a permanent free tier and it tied in with my overall Google account.\nWhile I was researching cloud hosts, I realized my current site was embarrassing. I hadn\u0026rsquo;t updated the thing in 8 years. It was looking pretty shabby.\nStatic Site Generation with Hugo I\u0026rsquo;ve been interested in static site generators since before I did my last redesign. It always felt like having a full database (such as Wordpress) for my dinky blog was overkill. When I did my last redesign (in 2012 or so), I ended up going with a Perl-based system called Blosxom. I think Blosxom was one of the first, if not THE first, static site generators.\nSince then, the number of static site generators has blown up. Now they have a cool new name (JAMstack). When I was looking to get off my hosting provider, I looked at several static site generators and landed on Hugo for the following reasons:\n Extensive library of decent looking templates Distributed as a single executable (Jekyll, for instance, requires a Ruby environment to be set up) Written in Go, which I don\u0026rsquo;t know but I\u0026rsquo;m interested in. I only know Python, and the only static site generator that I found using Python is Pelican, but their templates are not great.  So now I have a site up, generated with Hugo, hosted on the Google Cloud for free. Woot.\n"
    }
]
